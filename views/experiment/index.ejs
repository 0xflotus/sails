
<div class="container">
	<div class="mast outlet0"></div>
	<a href="experiment/2">Next example ></a>
</div>



<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.8.19/jquery-ui.min.js"></script>
<script type="text/javascript">
	
	$(function() {
		
		
		var DropdownComponent = Mast.Component.extend({
			template: '.dropdown.template',
			events: {
				click:'openMenu'
			},
			init: function() {
				//
			},
			openMenu: function(){
				this.pattern.setTemplate('.dropdown-expanded.template');
				_.defer(this.$el.clickoutside,this.closeMenu,this.$el);
			},
			
			closeMenu: function () {
				this.pattern.setTemplate('.dropdown.template');
			}
		});
	
		// Create some components
		a=new Mast.Component({
			model: new Mast.Model({
				name:'THING1 rendered!  Appended a dropdown component as well.'}),
			template: '.test.template',
	
			outlet:'.outlet0',
			
			// Triggered after each render
			afterRender: function () {
				this.$el.draggable();
				
				// We use a component instead of a pattern here
				// since the dropdown component is potentially reusable
				// and has uses in many different situations
				this.dropdownComponent = new DropdownComponent({
					outlet: this.$el
				});
			}
		});	
		
		b=new Mast.Component({
			pattern: new Mast.Pattern({
				model: new Mast.Model({name:'te1'}),
				template: '.test.template'
			}),
	
			outlet:'.outlet0',
			
			// Triggered after each render
			afterRender: function () {
				this.$el.draggable();
			}
		});
		
		
		
		// When you create a new Component, it renders to the DOM automatically
		// And subsequently, you don't have to force a component to render-- 
		// it'll do it on its own when its Pattern (template or model) changes.
		
		
		// First, let's try changing the model
		// an event is created at the model and bubbles up to the view
		a.pattern.model.set('name','Changed THING1\'s model.');
		b.pattern.model.set('name','Changed THING2\'s model.');
		
		
		// Now let's change the template-- notice how the DOM automatically updates
		// This is great for instances when a whole bunch of HTML needs to change 
		a.pattern.setTemplate('.test1.template');
		b.pattern.setTemplate('.test1.template');
		
		
		
		// Now let's try creating a Table
		// A Table is basically just a Component which contains 
		// a homogenous list of sub-Components
		t = new Mast.Table({
			template: '#mast-template-testtable',
			model: null,
			
			collection: new Mast.Collection,
			rowtemplate: '#mast-template-testtable-row',
			outlet: '.outlet0',
			autorender: false
		});
		
		
	});
	
</script>