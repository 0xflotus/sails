<style type="text/css">
	.template {
		display:none;
	}

	.test {
		background:red;
		width:200px;height:200px;
	}
	.test textarea {}
	
	
	
	
	.test1 {
		border: 2px solid gray;
		background-color: rgba(150,150,150,0.2);
		width:500px;
		padding: 1em;
	}
	.test1 textarea {
		margin:0.5em auto;
		padding: 5%;
		width: 90%;
		font-size: 1.5em;
		text-align:center;
	}

</style>
<style type="text/css">
	.dropdown {
		background: #eee;
		padding:1em;
		margin: 0 auto;
		width:50%;
	}

	.dropdown.expanded {
		background: #bbb;
	}
	.dropdown-expanded ul li {
		padding:1em;
		margin: 0 auto;
		width:50%;
		border: 1px solid blue;
	}
</style>


<div class="container">
	<div class="mast outlet0"></div>
</div>




<div class="test mast template">
	<textarea>{{name}}</textarea>
</div>

<div class="test1 template">
	<h3>NEW TEMPLATE</h3>
	<textarea>{{name}}</textarea>
	<p>Can use the same, or different data!</p>
</div>



<div class="dropdown template">
	CLICK HERE FOR DROPDOWN!
</div>

<div class="dropdown-expanded template">
	<ul><li>
			item 1
		</li></ul>
</div>







<ul class="row mast template">
	{{ cells }}
</ul>


<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.8.19/jquery-ui.min.js"></script>
<script type="text/javascript">
	
	$(function() {
		
		
		var DropdownComponent = Mast.Component.extend({
			template: '.dropdown.template',
			events: {click:'openMenu'},
			openMenu: function(){
				this.pattern.setTemplate('.dropdown-expanded.template');
			}
		});
	
		// Create some components
		a=new Mast.Component({
			model: new Mast.Model({
				name:'THING1 rendered!  Appended a dropdown component as well.'}),
			template: '.test.template',
	
			outlet:'.outlet0',
			
			// Triggered after each render
			afterRender: function () {
				this.$el.draggable();
				
				// We use a component instead of a pattern here
				// since the dropdown component is potentially reusable
				// and has uses in many different situations
				this.dropdownComponent = new DropdownComponent({
					outlet: this.$el
				});
			}
		});	
		
		b=new Mast.Component({
			model: new Mast.Model({name:'te1'}),
			template: '.test.template',
	
			outlet:'.outlet0',
			
			// Triggered after each render
			afterRender: function () {
				this.$el.draggable();
			}
		});
		
		
		
		// Now reset them again by calling render
		a.render();
		b.render();
		
		
		// But you don't have to force a component to render-- 
		// it'll do it on its own when its template or model changes
		
		
		// First, let's try changing the model
		// an event is created at the model and bubbles up to the view
		a.pattern.model.set('name','Changed THING1\'s model.');
		b.pattern.model.set('name','Changed THING2\'s model.');
		
		
		// Now let's change the template-- notice how the DOM automatically updates
		// This is great for instances when a whole bunch of HTML needs to change 
		a.pattern.setTemplate('.test1.template');
		b.pattern.setTemplate('.test1.template');
		
	});
	
</script>