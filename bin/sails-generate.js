#!/usr/bin/env node


/**
 * Module dependencies
 */

var package = require('../package.json')
	, reportback = require('reportback')()
	, path  = require('path')
	, captains = require('captains-log')
	, sailsgen = require('sails-generate');




/**
 * `sails generate`
 *
 * Generate module(s) for the app in our working directory.
 * Internally, uses ejs for rendering the various module templates.
 *
 * @param {Object} scope
 *	 {String} appPath		- path to sails app
 *	 {String} module		- e.g. 'controller' or 'model'
 *	 {String} path			- path to output directory
 *	 {String} id			- the module identity, e.g. 'user'
 *	 {String} globalID		- override for global identity (automatically generated by default)
 *	 {String} ext			- file extension for new module (Defaults to .js)
 *	 {Array} actions		- the array of action names (for controllers only)
 *	 {String} attributes	- the array of attribute name/type pairs (for models only)
 *
 * @param {Object} handlers
 *	{Function} * - different callbacks than may be triggered
 */

module.exports = function () {

	
	// TODO: get config
	var config = {};
	var log = captains(config.log);


	// Build initial scope
	var scope = {

		// TODO: get semantic info from CLI args
		args: cliArguments,
		rootPath: process.cwd(),
		sailsPackageJSON: package
	};

	var cliArguments = Array.prototype.slice.call(arguments);
	cliArguments.pop();

	var generatorType = cliArguments.shift();
	scope.args = cliArguments;

	var module = 'sails-generate-'+generatorType;

	var Generator;
	try {
		Generator = require(module);
	}
	catch(e) {
		// cb.couldNotLoadGenerator
		throw e;
	}

	return sailsgen(Generator, scope, reportback.extend());
};




	// function (module) {
	// 	var cmd = module;
	// 	if (arguments.length === 1) {
	// 		module = null;
	// 	}

	// 	console.log('sails generate '+module);
	// 	// program
	// 	// 	.command('model <resource>')
	// 	// 	.description('')
	// 	// 	.action(console.log);
	// 	// program
	// 	// 	.command('controller <resource>')
	// 	// 	.description('');
	// 	// program
	// 	// 	.command('api <resource>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('response <method>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('policy <name>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('service <name>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('adapter <name>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('generator <name>')
	// 	// 	.description('');
	// 	// generate
	// 	// 	.command('hook <name>')
	// 	// 	.description('');
	// });
