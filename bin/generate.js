/**
 * Module dependencies
 */
var util		= require('../util'),
	argv		= require('optimist').argv,
	Logger		= require('../lib/hooks/logger/captains'),
	fs			= require('fs-extra'),
	path		= require('path'),
	ejs			= require('ejs'),
	Err			= require('../errors'),
	Sails		= require('../lib/app');


// Build logger using command-line config
var log = new Logger(util.getCLIConfig(argv).log);




/**
 * `sails generate`
 *
 * Generate module(s) for the app in our working directory.
 * Internally, uses ejs for rendering the various module templates.
 *
 * @param {Object} options
 *	 {String} appPath		- path to sails app
 *	 {String} module		- e.g. 'controller' or 'model'
 *	 {String} path			- path to output directory
 *	 {String} id			- the module identity, e.g. 'user'
 *	 {String} globalID		- override for global identity (automatically generated by default)
 *	 {String} ext			- file extension for new module (Defaults to .js)
 *	 {Array} actions		- the array of action names (for controllers only)
 *	 {String} attributes	- the array of attribute name/type pairs (for models only)
 *
 * @param {Object} handlers
 *	{Function} * - different callbacks than may be triggered
 */

module.exports = function generate ( options, handlers ) {



	// TODO: Load up Sails in the working directory in case
	// custom paths have been configured
	var appPath				= options.appPath || process.cwd(),
		dirPath				= options.path || appPath,
		errors,
		attributes			= options.attributes,
		actions				= options.actions,
		ext					= options.ext || 'js',
		module				= options.module,
		id					= options.id,
		globalID			= options.globalID || util.str.capitalize(options.id),
		filename;



	// Ensure this directory is a Sails app
	// (override with --force)
	if ( !Sails.isSailsApp( appPath ) && ! options.force ) {
		Err.fatal.notSailsApp();
		return;
	}



	// Trim peculiar characters from module id
	id = util.str.trim(id, '/');
	globalID = util.str.trim(globalID, '/');
	

	switch ( module ) {

		case 'controller':

			dirPath += '/api/controllers';
			globalID += 'Controller';
			filename = globalID + '.' + ext;


			// Validate optional action arguments
			errors = [];
			actions = util.map(actions, function (action, i) {
				
				// TODO: validate action names
				var invalid = false;

				// Handle errors
				if (invalid) {
					return errors.push(
						'Invalid action notation:   "' + action + '"');
				}
				return action;
			});

			// Handle invalid action arguments
			// Send back errors
			if (errors.length) {
				return handlers.invalid.apply(handlers, errors);
			}

			// Make sure there aren't duplicates
			if ((util.uniq(actions)).length !== actions.length) {
				return handlers.invalid('Duplicate actions not allowed!');
			}

			// Dry run option
			if ( options.dry ) {
				break;
			}

			var pathToControllerTemplate = path.resolve(__dirname,'./generators/controller.ejs');
			var controllerTemplate = fs.readFileSync(pathToControllerTemplate, 'utf8');
			var pathToActionTemplate = path.resolve(__dirname,'./generators/action.ejs');
			var actionTemplate = fs.readFileSync(pathToActionTemplate, 'utf8');

			// Create the actions' code
			var renderedActions = util.map(actions, function (action) {
				return ejs.render(actionTemplate, { actionName: action });
			});

			// Create the controller code
			var renderedCode = ejs.render(controllerTemplate, {
				filename: filename,
				controllerName: globalID,
				actions: renderedActions
			});

			// If it doesn't already exist, create a controller file
			var modulePath = dirPath + '/' + filename;
			if ( fs.existsSync(modulePath) ) {
				return handlers.error(globalID + ' already exists!');
			}
			fs.outputFileSync(modulePath, renderedCode);


			break;



		case 'model':

			dirPath += '/api/models';
			filename = globalID + '.' + ext;

			// Validate optional attribute arguments
			errors = [];
			attributes = util.map(attributes, function (attribute, i) {
				var parts = attribute.split(':');

				if ( parts[1] === undefined ) parts[1] = 'string';

				// Handle errors
				if (!parts[1] || !parts[0]) {
					errors.push(
						'Invalid attribute notation:   "' + attribute + '"');
					return;
				}
				return {
					name: parts[0],
					type: parts[1]
				};
			});



			// Handle invalid attribute arguments
			// Send back errors
			if (errors.length) {
				return handlers.invalid.apply(handlers, errors);
			}


			// Make sure there aren't duplicates
			var attrNames = util.pluck(attributes, 'name');
			if ((util.uniq(attrNames)).length !== attrNames.length) {
				return handlers.invalid('Duplicate attributes not allowed!');
			}

			// Dry run option
			if ( options.dry ) {
				break;
			}

			var pathToModelTemplate = path.resolve(__dirname,'./generators/model.ejs');
			var modelTemplate = fs.readFileSync(pathToModelTemplate, 'utf8');
			var pathToAttributeTemplate = path.resolve(__dirname,'./generators/attribute.ejs');
			var attributeTemplate = fs.readFileSync(pathToAttributeTemplate, 'utf8');

			// Create the attributes' code
			var renderedAttributes = util.map(attributes, function (attr) {
				return ejs.render(attributeTemplate, attr);
			});

			// Create the model code
			var renderedModelCode = ejs.render(modelTemplate, {
				filename: filename,
				attributes: attributes
			});

			// If it doesn't already exist, create a file
			var modelPath = dirPath + '/' + filename;
			if ( fs.existsSync(modelPath) ) {
				return handlers.error(globalID + ' already exists!');
			}
			fs.outputFileSync(modelPath, renderedModelCode);

	}



	// Finish up with a success message

	// Change verbiage/style if this was a dry run
	if (options.dry) {
		log.debug('DRY RUN:');
	}
	var logFn = options.dry ?
		log.debug :
		log.info;
	var actionTaken = options.dry ?
		'Would have generated' :
		'Generated';


	// If attributes were specified:
	if (attributes && attributes.length) {
		logFn( actionTaken + ' a new model called ' + globalID + ' with attributes:');
		util.each(attributes, function (attr) {
			logFn('  ',attr.name,'    (' + attr.type + ')');
		});
	}

	// If actions were specified:
	else if (actions && actions.length) {
		logFn(actionTaken + ' a new controller called ' + globalID + ' with actions:');
		util.each(actions, function (action) {
			logFn('  ',globalID + '.' + action + '()');
		});
	}

	// General case
	else logFn(actionTaken + ' ' + module + ' `' + globalID + '`!');

	// Finally,
	if (options.dry) {
		log.verbose('New file would have been created: ' + dirPath + '/' + filename);
	}
	else log.verbose('New file created: ' + dirPath + '/' + filename);

	return;
};
